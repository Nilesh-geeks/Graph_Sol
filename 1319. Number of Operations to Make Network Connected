Problem :: 1319. Number of Operations to Make Network Connected
There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.

You are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.

Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.


Time Complexity :: O(E log E)
Space Complexity :: O(E)

Code ::
#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class DisJoint{
    public :
      vector<int>parent , size;
    DisJoint(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0 ; i<n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int find_parent(int u){
        if(parent[u] == u)return u;
        return parent[u] = find_parent(parent[u]);
    }
    
    void UnionBySize(int u , int v){
        int ult_u = find_parent(u);
        int ult_v = find_parent(v);
        if(ult_u == ult_v)return;
        if(size[ult_u]<size[ult_v]){
            parent[ult_u] = ult_v;
            size[ult_v]+= size[ult_u];
        }
        else{
            parent[ult_v] = ult_u;
            size[ult_u]+=size[ult_v];
        }
    }
};
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& edge) {
          int cnt=0;
        DisJoint ds(n);
        for( auto it:edge){
            int u = it[0];
            int v = it[1];
            if(ds.find_parent(u)==ds.find_parent(v))cnt++;
            else{
                ds.UnionBySize(u,v);
            }
        }
         int c =0;
        for(int i=0 ; i<n;i++){
            if(ds.parent[i] ==i) c++;
        }  
        if(c-1 <=cnt)return c-1;
        return -1;
    }
};
