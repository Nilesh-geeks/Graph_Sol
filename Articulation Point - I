Problem :: Articulation Point - I
Given an undirected connected graph with V vertices and adjacency list adj. 
You are required to find all the vertices removing which (and edges through it) disconnects the graph into 2 or more components and return it in sorted manner.
Note: Indexing is zero-based i.e nodes numbering from (0 to V-1). There might be loops present in the graph.

Time Complexity :: O( V + E)
Space Complexity :: O(V)

Code :: 
class Solution {
    int timer =0;
void dfs(int node, int parent, vector<bool>&vis  ,vector<int>&dis ,  
    vector<int>&low , vector<int>&mark , vector<int>adj[])
    {
        int child=0;
        vis[node]=true;
        dis[node] = low[node] = timer++;
        for(auto &nbr:adj[node]){
        if(nbr == parent)continue;
        if(!vis[nbr]){
            child++;
            dfs(nbr,node,vis,dis,low,mark, adj);
            low[node] = min(low[node] , low[nbr]);
            if(low[nbr]>=dis[node] && parent!=-1){
                mark[node] = 1;
            }
        }else // back edge meaning there is different path possible
            low[node] = min(low[node] , dis[nbr]);
            
        
    }
    if(child>1 && parent==-1)mark[node] = 1;
}
  public:
    vector<int> articulationPoints(int V, vector<int>adj[]) {
            vector<int>ans;
            vector<bool>vis(V, 0);
            vector<int>dis(V, -1);
            vector<int>low(V, -1);
            vector<int>mark(V,0);
            for(int i =0 ; i<V ; i++){
                if(!vis[i]){
                    dfs(i , -1 , vis , dis , low , mark ,adj);
                }
            } 
            
            for(int i=0 ; i<V ; i++){
                if(mark[i])ans.push_back(i);
            }
            if( ans.size()==0)return {-1};
            return ans;
    }
};
