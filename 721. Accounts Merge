Problem :: 721. Accounts Merge

Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.
Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts.
Note that even if two accounts have the same name, they may belong to different people as people could have the same name. 
A person can have any number of accounts initially, but all of their accounts definitely have the same name.
After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. 
The accounts themselves can be returned in any order.


Complexity
Time complexity:
    O(N*M) // N = account.size() , M = account[i].size()
  + O(N log M) // DisJointSet Algorithm TC
  
 => O(N*M)
    
Space complexity:
    O(N*M) // Space used to store map 

Code::
#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class DisJoint{
    public :
    vector<int> size , parent;
    DisJoint(int n){
        size.resize(n+1);
        parent.resize(n+1);
        for(int i=0 ; i<n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int find_parent(int u){
        if(u== parent[u])return u;
        return parent[u] = find_parent(parent[u]);
    }

    void UnionBySize(int u , int v){
        int ulu_u = find_parent(u);
        int ulu_v = find_parent(v);
        if(ulu_u == ulu_v)return ;
        if(size[ulu_u] < size[ulu_v]){
            parent[ulu_u] = ulu_v;
            size[ulu_v] += size[ulu_u];
        }
        else{
            parent[ulu_v] = ulu_u;
            size[ulu_u] += size[ulu_v];
        }
    }
};
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisJoint ds(n );
        unordered_map<string, int>m;
        for(int i=0 ; i<n; i++){
            for(int j = 1 ; j<accounts[i].size() ; j++){
                if(m.find(accounts[i][j])!=m.end()){
                    ds.UnionBySize( i , m[accounts[i][j]]);
                }
                else{
                    m[accounts[i][j]] = i;
                }
            }
        }
        /*  SEE THE FIRST EXAMPLE
         In Map we have stored 
         johnsmith@mail.com     - 0 
         john_newyork@mail.com  - 0
         johnsmith@mail.com     - 0
         john00@mail.com        - 1
         mary@mail.com          - 2
         johnnybravo@mail.com   - 3
        */
        /*
            In DisJoint set we will be having
             parent = [0,1,2,3] after operation parent = [0,0,2,3] /
             Means first they all were their parent after operation we
             found that  0 and 1 have some email in common so it means
             0 and 1 are connected and accounts[1] should be merged to 0
             Therefore: We made parent 1 as 0
        */
        vector<string>merge[n];
        for(auto it:m){
            int parent = ds.find_parent(it.second) ;
            merge[parent].push_back(it.first);
        }
        /*
         In this we are finding the final parent and storing the mails 
        to respective parent
        merge[0] =   johnsmith@mail.com , john_newyork@mail.com 
                     ,  johnsmith@mail.com ,john00@mail.com 

        merge[1] =  NULL // as parent of 1 is 0 so merged before
        merge[2] =  mary@mail.com
        merge[3] = johnnybravo@mail.com
        */
        vector<vector<string>>ans;
        for(int i=0 ; i< n ; i++){
            if(merge[i].size()==0)continue; // ignore as storing empty 
            vector<string>temp;
            temp.push_back(accounts[i][0]); // store the name
            sort(begin(merge[i]) , end(merge[i])); // sort the merge mail
            for(auto it: merge[i])
              temp.push_back(it);
            ans.push_back(temp);
        }
        return ans;
    }
};
