Problem ::  Number Of Islands
You are given a n,m which means the row and column of the 2D matrix and an array of  size k denoting the number of operations. 
Matrix elements is 0 if there is water or 1 if there is land. Originally, the 2D matrix is all 0 which means there is no land in the matrix. 
The array has k operator(s) and each operator has two integer A[i][0], A[i][1] means that you can change the cell matrix[A[i][0]][A[i][1]] from sea to island. 
Return how many island are there in the matrix after each operation.You need to return an array of size k.
Note : An island means group of 1s such that they share a common side.

Time Complexity :: O(m * n log (n))
Space Complexity :: O(m*n)

Code ::
class DisJoint{
    public :
    vector<int> size , parent;
    DisJoint(int n){
        size.resize(n+1);
        parent.resize(n+1);
        for(int i=0 ; i<n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int find_parent(int u){
        if(u== parent[u])return u;
        return parent[u] = find_parent(parent[u]);
    }

    void UnionBySize(int u , int v){
        int ulu_u = find_parent(u);
        int ulu_v = find_parent(v);
        if(ulu_u == ulu_v)return ;
        if(size[ulu_u] < size[ulu_v]){
            parent[ulu_u] = ulu_v;
            size[ulu_v] += size[ulu_u];
        }
        else{
            parent[ulu_v] = ulu_u;
            size[ulu_u] += size[ulu_v];
        }
    }
};
class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        vector<vector<int>>vis(n , vector<int>(m,0));
        DisJoint ds(m*n);
        int cnt =0;
        vector<int>ans;
        for(auto it : operators){
            int u = it[0];
            int v = it[1];
            if(vis[u][v]==1){
                 ans.push_back(cnt);
                continue;
                
            }
            vis[u][v] = 1;
            cnt++;
            int p = u*m + v;
            int dr[] = {-1,0,1,0};
            int dc[] = {0,1,0,-1};
            for(int i =0 ; i<4 ; i++){
                int newr = u + dr[i];
                int newc = v + dc[i];
                int pos = newr*m + newc;
                if(newr>=0 && newr<n && newc>=0 && newc<m && vis[newr][newc]){
                    if(ds.find_parent(p)!=ds.find_parent(pos)){
                        cnt--;
                        ds.UnionBySize(p , pos);
                        
                    }
                }
            }
            ans.push_back(cnt);
        }
        
        return ans;
    }
};
