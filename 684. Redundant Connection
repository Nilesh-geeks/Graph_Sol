Problem :: 684. Redundant Connection
In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

Time Complxity :: O(E log E)
Space Complexity :: O(E)

Code :: 
#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class DisJoint{
    vector<int>parent , size;
    public :
    DisJoint(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0 ; i<n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int find_parent(int u){
        if(parent[u] == u)return u;
        return parent[u] = find_parent(parent[u]);
    }
    
    void UnionBySize(int u , int v){
        int ult_u = find_parent(u);
        int ult_v = find_parent(v);
        if(ult_u == ult_v)return;
        if(size[ult_u]<size[ult_v]){
            parent[ult_u] = ult_v;
            size[ult_v]+= size[ult_u];
        }
        else{
            parent[ult_v] = ult_u;
            size[ult_u]+=size[ult_v];
        }
    }
};
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        vector<int>ans;
        DisJoint ds(edges.size());
        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            if(ds.find_parent(u) == ds.find_parent(v)){
            ans.push_back(u);
            ans.push_back(v);
            }
            else{
                ds.UnionBySize(u,v);
            }
        }
        return ans;
    }
};
