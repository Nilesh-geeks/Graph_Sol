Problem :: 947. Most Stones Removed with Same Row or Column
On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.
A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

Time Complexity :: O(n+m)
Space Complexity :: O(n+m0

Code :: 
class DisjointSet {
public:
 vector<int> rank, parent, size;
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int maxrow =0;
        int maxcol =0;
        for(auto it:stones){
            maxrow =max( maxrow , it[0]);
            maxcol = max(maxcol , it[1]);
        }
        unordered_map<int,int>m;
        DisjointSet ds(maxrow + maxcol+1);
        for(auto it: stones){
            int row = it[0];
            int col = it[1] + maxrow + 1;
            ds.unionBySize(row , col);
            m[row] = 1;
            m[col] = 1;// just to keep track number of components
        }
        int cnt=0;
        for(auto it:m){
            if(ds.findUPar(it.first)==it.first)cnt++;
        }
        return stones.size() - cnt;
    }
};
